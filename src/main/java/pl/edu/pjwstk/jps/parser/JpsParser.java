
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 16 21:35:22 CET 2013
//----------------------------------------------------

package pl.edu.pjwstk.jps.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import pl.edu.pjwstk.jps.ast.binary.*;
import pl.edu.pjwstk.jps.ast.*;
import pl.edu.pjwstk.jps.ast.terminal.*;
import pl.edu.pjwstk.jps.ast.unary.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 16 21:35:22 CET 2013
  */
public class JpsParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JpsParser() {super();}

  /** Constructor which sets the default scanner. */
  public JpsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JpsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\026\011\015\023\005\024\004\025\007\026" +
    "\011\027\016\031\012\033\017\034\006\035\010\001\002" +
    "\000\026\011\015\023\005\024\004\025\007\026\011\027" +
    "\016\031\012\033\017\034\006\035\010\001\002\000\026" +
    "\011\015\023\005\024\004\025\007\026\011\027\016\031" +
    "\012\033\017\034\006\035\010\001\002\000\044\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\030\uffe9\032\uffe9\001\002\000\026\011\015\023" +
    "\005\024\004\025\007\026\011\027\016\031\012\033\017" +
    "\034\006\035\010\001\002\000\044\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030" +
    "\uffe8\032\uffe8\001\002\000\026\011\015\023\005\024\004" +
    "\025\007\026\011\027\016\031\012\033\017\034\006\035" +
    "\010\001\002\000\026\011\015\023\005\024\004\025\007" +
    "\026\011\027\016\031\012\033\017\034\006\035\010\001" +
    "\002\000\004\002\060\001\002\000\042\002\000\004\031" +
    "\005\021\006\025\007\024\010\034\012\022\013\036\014" +
    "\023\015\032\016\027\017\030\020\037\021\026\022\033" +
    "\030\035\001\002\000\026\011\015\023\005\024\004\025" +
    "\007\026\011\027\016\031\012\033\017\034\006\035\010" +
    "\001\002\000\026\011\015\023\005\024\004\025\007\026" +
    "\011\027\016\031\012\033\017\034\006\035\010\001\002" +
    "\000\044\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\030\uffea\032\uffea\001\002\000" +
    "\044\002\uffec\004\031\005\021\006\025\007\024\010\034" +
    "\012\022\013\036\014\023\015\032\016\027\017\030\020" +
    "\037\021\026\022\033\030\035\032\uffec\001\002\000\026" +
    "\011\015\023\005\024\004\025\007\026\011\027\016\031" +
    "\012\033\017\034\006\035\010\001\002\000\026\011\015" +
    "\023\005\024\004\025\007\026\011\027\016\031\012\033" +
    "\017\034\006\035\010\001\002\000\026\011\015\023\005" +
    "\024\004\025\007\026\011\027\016\031\012\033\017\034" +
    "\006\035\010\001\002\000\026\011\015\023\005\024\004" +
    "\025\007\026\011\027\016\031\012\033\017\034\006\035" +
    "\010\001\002\000\026\011\015\023\005\024\004\025\007" +
    "\026\011\027\016\031\012\033\017\034\006\035\010\001" +
    "\002\000\026\011\015\023\005\024\004\025\007\026\011" +
    "\027\016\031\012\033\017\034\006\035\010\001\002\000" +
    "\026\011\015\023\005\024\004\025\007\026\011\027\016" +
    "\031\012\033\017\034\006\035\010\001\002\000\026\011" +
    "\015\023\005\024\004\025\007\026\011\027\016\031\012" +
    "\033\017\034\006\035\010\001\002\000\026\011\015\023" +
    "\005\024\004\025\007\026\011\027\016\031\012\033\017" +
    "\034\006\035\010\001\002\000\026\011\015\023\005\024" +
    "\004\025\007\026\011\027\016\031\012\033\017\034\006" +
    "\035\010\001\002\000\026\011\015\023\005\024\004\025" +
    "\007\026\011\027\016\031\012\033\017\034\006\035\010" +
    "\001\002\000\026\011\015\023\005\024\004\025\007\026" +
    "\011\027\016\031\012\033\017\034\006\035\010\001\002" +
    "\000\026\011\015\023\005\024\004\025\007\026\011\027" +
    "\016\031\012\033\017\034\006\035\010\001\002\000\026" +
    "\011\015\023\005\024\004\025\007\026\011\027\016\031" +
    "\012\033\017\034\006\035\010\001\002\000\026\011\015" +
    "\023\005\024\004\025\007\026\011\027\016\031\012\033" +
    "\017\034\006\035\010\001\002\000\044\002\ufff2\004\031" +
    "\005\021\006\025\007\024\010\034\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\030\ufff2\032\ufff2\001\002\000\044\002\ufff9\004\031\005" +
    "\021\006\025\007\024\010\034\012\ufff9\013\ufff9\014\ufff9" +
    "\015\032\016\027\017\030\020\037\021\026\022\033\030" +
    "\ufff9\032\ufff9\001\002\000\044\002\ufff0\004\031\005\021" +
    "\006\025\007\024\010\034\012\022\013\036\014\023\015" +
    "\032\016\027\017\030\020\037\021\026\022\033\030\ufff0" +
    "\032\ufff0\001\002\000\044\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\030\ufffb\032" +
    "\ufffb\001\002\000\044\002\ufff1\004\031\005\021\006\025" +
    "\007\024\010\034\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\030\ufff1\032\ufff1" +
    "\001\002\000\044\002\ufff6\004\031\005\021\006\025\007" +
    "\024\010\034\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\030\ufff6\032\ufff6\001" +
    "\002\000\044\002\uffff\004\uffff\005\uffff\006\025\007\024" +
    "\010\034\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\030\uffff\032\uffff\001\002" +
    "\000\044\002\ufff4\004\031\005\021\006\025\007\024\010" +
    "\034\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\030\ufff4\032\ufff4\001\002\000" +
    "\044\002\ufff5\004\031\005\021\006\025\007\024\010\034" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\030\ufff5\032\ufff5\001\002\000\044" +
    "\002\ufff3\004\031\005\021\006\025\007\024\010\034\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\030\ufff3\032\ufff3\001\002\000\044\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\030\ufffd\032\ufffd\001\002\000\044\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\030\ufffc\032\ufffc\001\002\000\044\002\ufff8\004" +
    "\031\005\021\006\025\007\024\010\034\012\ufff8\013\ufff8" +
    "\014\ufff8\015\032\016\027\017\030\020\037\021\026\022" +
    "\033\030\ufff8\032\ufff8\001\002\000\044\002\ufffa\004\031" +
    "\005\021\006\025\007\024\010\034\012\ufffa\013\ufffa\014" +
    "\ufffa\015\032\016\027\017\030\020\037\021\026\022\033" +
    "\030\ufffa\032\ufffa\001\002\000\044\002\ufffe\004\ufffe\005" +
    "\ufffe\006\025\007\024\010\034\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\030" +
    "\ufffe\032\ufffe\001\002\000\044\002\ufff7\004\031\005\021" +
    "\006\025\007\024\010\034\012\022\013\036\014\023\015" +
    "\032\016\027\017\030\020\037\021\026\022\033\030\035" +
    "\032\ufff7\001\002\000\004\002\001\001\002\000\042\004" +
    "\031\005\021\006\025\007\024\010\034\012\022\013\036" +
    "\014\023\015\032\016\027\017\030\020\037\021\026\022" +
    "\033\030\035\032\062\001\002\000\044\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\030\uffe7\032\uffe7\001\002\000\044\002\uffeb\004\031\005" +
    "\021\006\025\007\024\010\034\012\022\013\036\014\023" +
    "\015\032\016\027\017\030\020\037\021\026\022\033\030" +
    "\035\032\uffeb\001\002\000\044\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\030\uffee" +
    "\032\uffee\001\002\000\044\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\030\uffef\032" +
    "\uffef\001\002\000\044\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\030\uffed\032\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\006\002\012\003\013\001\001\000\004\003" +
    "\065\001\001\000\004\003\064\001\001\000\002\001\001" +
    "\000\004\003\063\001\001\000\002\001\001\000\004\003" +
    "\062\001\001\000\004\003\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\056\001\001\000\004\003" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\055\001\001\000\004\003\054\001\001\000\004\003" +
    "\053\001\001\000\004\003\052\001\001\000\004\003\051" +
    "\001\001\000\004\003\050\001\001\000\004\003\047\001" +
    "\001\000\004\003\046\001\001\000\004\003\045\001\001" +
    "\000\004\003\044\001\001\000\004\003\043\001\001\000" +
    "\004\003\042\001\001\000\004\003\041\001\001\000\004" +
    "\003\040\001\001\000\004\003\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JpsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JpsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JpsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }

 
	public Lexer lexer;
	private String expr;
	public AbstractExpression RESULT;
	
	public JpsParser(String expr) {
		this.symbolFactory = new DefaultSymbolFactory();   
		this.expr = expr;
	}
	
	void setResult(AbstractExpression exp) {
		this.RESULT = exp;
	}  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JpsParser$actions {
  private final JpsParser parser;

  /** Constructor */
  CUP$JpsParser$actions(JpsParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JpsParser$do_action(
    int                        CUP$JpsParser$act_num,
    java_cup.runtime.lr_parser CUP$JpsParser$parser,
    java.util.Stack            CUP$JpsParser$stack,
    int                        CUP$JpsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JpsParser$result;

      /* select the action based on the action number */
      switch (CUP$JpsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		 RESULT = e1; 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= BOOLEAN_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new BooleanTerminal((Boolean)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= DOUBLE_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Double o = (Double)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new DoubleTerminal((Double)o);   
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= INTEGER_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new IntegerTerminal((Integer)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= MAX expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MaxExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MIN expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MinExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= AVG expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new AvgExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= COUNT expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new CountExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= SUM expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new SumExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr COMMA expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new CommaExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MORE_EQ_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MoreOrEqualThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr LESS_EQ_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new LessOrEqualThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MORE_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MoreThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LESS_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new LessThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr NOT_EQ expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr EQ expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= NOT expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new NotExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr XOR expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new XORExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr OR expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new OrExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr AND expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new AndExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new ModuloExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new DivideExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MultiplyExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MinusExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new PlusExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              AbstractExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression start_val = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		RESULT = start_val;
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JpsParser$parser.done_parsing();
          return CUP$JpsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

