
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 19 18:25:13 CET 2013
//----------------------------------------------------

package pl.edu.pjwstk.jps.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import pl.edu.pjwstk.jps.ast.binary.*;
import pl.edu.pjwstk.jps.ast.*;
import pl.edu.pjwstk.jps.ast.terminal.*;
import pl.edu.pjwstk.jps.ast.unary.*;
import pl.edu.pjwstk.jps.ast.auxname.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 19 18:25:13 CET 2013
  */
public class JpsParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JpsParser() {super();}

  /** Constructor which sets the default scanner. */
  public JpsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JpsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\046\004\024\006\022\007\030\010\011\011" +
    "\015\012\012\020\010\032\007\033\021\034\027\035\025" +
    "\036\023\037\016\040\020\045\005\046\006\051\014\052" +
    "\026\001\002\000\064\002\000\013\035\014\051\015\034" +
    "\016\046\017\041\021\033\022\036\023\056\024\055\025" +
    "\060\026\047\027\042\030\043\031\054\041\053\042\045" +
    "\043\052\044\044\047\050\050\037\053\040\054\061\055" +
    "\032\056\057\001\002\000\046\004\024\006\022\007\030" +
    "\010\011\011\015\012\012\020\010\032\007\033\021\034" +
    "\027\035\025\036\023\037\016\040\020\045\005\046\006" +
    "\051\014\052\026\001\002\000\046\004\024\006\022\007" +
    "\030\010\011\011\015\012\012\020\010\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\045\005\046" +
    "\006\051\014\052\026\001\002\000\046\004\024\006\022" +
    "\007\030\010\011\011\015\012\012\020\010\032\007\033" +
    "\021\034\027\035\025\036\023\037\016\040\020\045\005" +
    "\046\006\051\014\052\026\001\002\000\046\004\024\006" +
    "\022\007\030\010\011\011\015\012\012\020\010\032\007" +
    "\033\021\034\027\035\025\036\023\037\016\040\020\045" +
    "\005\046\006\051\014\052\026\001\002\000\132\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\132\002" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000\004" +
    "\002\125\001\002\000\046\004\024\006\022\007\030\010" +
    "\011\011\015\012\012\020\010\032\007\033\021\034\027" +
    "\035\025\036\023\037\016\040\020\045\005\046\006\051" +
    "\014\052\026\001\002\000\132\002\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\001\002\000\046\004\024\006\022\007" +
    "\030\010\011\011\015\012\012\020\010\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\045\005\046" +
    "\006\051\014\052\026\001\002\000\132\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\001\002\000\046\004\024\006" +
    "\022\007\030\010\011\011\015\012\012\020\010\032\007" +
    "\033\021\034\027\035\025\036\023\037\016\040\020\045" +
    "\005\046\006\051\014\052\026\001\002\000\046\004\024" +
    "\006\022\007\030\010\011\011\015\012\012\020\010\032" +
    "\007\033\021\034\027\035\025\036\023\037\016\040\020" +
    "\045\005\046\006\051\014\052\026\001\002\000\132\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\046" +
    "\004\024\006\022\007\030\010\011\011\015\012\012\020" +
    "\010\032\007\033\021\034\027\035\025\036\023\037\016" +
    "\040\020\045\005\046\006\051\014\052\026\001\002\000" +
    "\046\004\024\006\022\007\030\010\011\011\015\012\012" +
    "\020\010\032\007\033\021\034\027\035\025\036\023\037" +
    "\016\040\020\045\005\046\006\051\014\052\026\001\002" +
    "\000\046\004\024\006\022\007\030\010\011\011\015\012" +
    "\012\020\010\032\007\033\021\034\027\035\025\036\023" +
    "\037\016\040\020\045\005\046\006\051\014\052\026\001" +
    "\002\000\046\004\024\006\022\007\030\010\011\011\015" +
    "\012\012\020\010\032\007\033\021\034\027\035\025\036" +
    "\023\037\016\040\020\045\005\046\006\051\014\052\026" +
    "\001\002\000\046\004\024\006\022\007\030\010\011\011" +
    "\015\012\012\020\010\032\007\033\021\034\027\035\025" +
    "\036\023\037\016\040\020\045\005\046\006\051\014\052" +
    "\026\001\002\000\132\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\132\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\052\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\001\002\000\046\004\024\006\022\007\030" +
    "\010\011\011\015\012\012\020\010\032\007\033\021\034" +
    "\027\035\025\036\023\037\016\040\020\045\005\046\006" +
    "\051\014\052\026\001\002\000\046\004\024\006\022\007" +
    "\030\010\011\011\015\012\012\020\010\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\045\005\046" +
    "\006\051\014\052\026\001\002\000\046\004\024\006\022" +
    "\007\030\010\011\011\015\012\012\020\010\032\007\033" +
    "\021\034\027\035\025\036\023\037\016\040\020\045\005" +
    "\046\006\051\014\052\026\001\002\000\046\004\024\006" +
    "\022\007\030\010\011\011\015\012\012\020\010\032\007" +
    "\033\021\034\027\035\025\036\023\037\016\040\020\045" +
    "\005\046\006\051\014\052\026\001\002\000\046\004\024" +
    "\006\022\007\030\010\011\011\015\012\012\020\010\032" +
    "\007\033\021\034\027\035\025\036\023\037\016\040\020" +
    "\045\005\046\006\051\014\052\026\001\002\000\046\004" +
    "\024\006\022\007\030\010\011\011\015\012\012\020\010" +
    "\032\007\033\021\034\027\035\025\036\023\037\016\040" +
    "\020\045\005\046\006\051\014\052\026\001\002\000\004" +
    "\012\103\001\002\000\046\004\024\006\022\007\030\010" +
    "\011\011\015\012\012\020\010\032\007\033\021\034\027" +
    "\035\025\036\023\037\016\040\020\045\005\046\006\051" +
    "\014\052\026\001\002\000\046\004\024\006\022\007\030" +
    "\010\011\011\015\012\012\020\010\032\007\033\021\034" +
    "\027\035\025\036\023\037\016\040\020\045\005\046\006" +
    "\051\014\052\026\001\002\000\046\004\024\006\022\007" +
    "\030\010\011\011\015\012\012\020\010\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\045\005\046" +
    "\006\051\014\052\026\001\002\000\046\004\024\006\022" +
    "\007\030\010\011\011\015\012\012\020\010\032\007\033" +
    "\021\034\027\035\025\036\023\037\016\040\020\045\005" +
    "\046\006\051\014\052\026\001\002\000\046\004\024\006" +
    "\022\007\030\010\011\011\015\012\012\020\010\032\007" +
    "\033\021\034\027\035\025\036\023\037\016\040\020\045" +
    "\005\046\006\051\014\052\026\001\002\000\046\004\024" +
    "\006\022\007\030\010\011\011\015\012\012\020\010\032" +
    "\007\033\021\034\027\035\025\036\023\037\016\040\020" +
    "\045\005\046\006\051\014\052\026\001\002\000\046\004" +
    "\024\006\022\007\030\010\011\011\015\012\012\020\010" +
    "\032\007\033\021\034\027\035\025\036\023\037\016\040" +
    "\020\045\005\046\006\051\014\052\026\001\002\000\046" +
    "\004\024\006\022\007\030\010\011\011\015\012\012\020" +
    "\010\032\007\033\021\034\027\035\025\036\023\037\016" +
    "\040\020\045\005\046\006\051\014\052\026\001\002\000" +
    "\046\004\024\006\022\007\030\010\011\011\015\012\012" +
    "\020\010\032\007\033\021\034\027\035\025\036\023\037" +
    "\016\040\020\045\005\046\006\051\014\052\026\001\002" +
    "\000\046\004\024\006\022\007\030\010\011\011\015\012" +
    "\012\020\010\032\007\033\021\034\027\035\025\036\023" +
    "\037\016\040\020\045\005\046\006\051\014\052\026\001" +
    "\002\000\046\004\024\006\022\007\030\010\011\011\015" +
    "\012\012\020\010\032\007\033\021\034\027\035\025\036" +
    "\023\037\016\040\020\045\005\046\006\051\014\052\026" +
    "\001\002\000\046\004\024\006\022\007\030\010\011\011" +
    "\015\012\012\020\010\032\007\033\021\034\027\035\025" +
    "\036\023\037\016\040\020\045\005\046\006\051\014\052" +
    "\026\001\002\000\046\004\024\006\022\007\030\010\011" +
    "\011\015\012\012\020\010\032\007\033\021\034\027\035" +
    "\025\036\023\037\016\040\020\045\005\046\006\051\014" +
    "\052\026\001\002\000\046\004\024\006\022\007\030\010" +
    "\011\011\015\012\012\020\010\032\007\033\021\034\027" +
    "\035\025\036\023\037\016\040\020\045\005\046\006\051" +
    "\014\052\026\001\002\000\046\004\024\006\022\007\030" +
    "\010\011\011\015\012\012\020\010\032\007\033\021\034" +
    "\027\035\025\036\023\037\016\040\020\045\005\046\006" +
    "\051\014\052\026\001\002\000\046\004\024\006\022\007" +
    "\030\010\011\011\015\012\012\020\010\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\045\005\046" +
    "\006\051\014\052\026\001\002\000\004\012\062\001\002" +
    "\000\132\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001" +
    "\002\000\132\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\035\014\051\015\034\016" +
    "\046\017\041\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\053" +
    "\042\045\043\052\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\040\054\061\055\ufff5\056\ufff5" +
    "\001\002\000\132\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\035\014\051\015\034" +
    "\016\046\017\041\020\uffe1\021\033\022\036\023\056\024" +
    "\055\025\060\026\047\027\042\030\043\031\054\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\053\042\045\043\052\044\044\045\uffe1\046\uffe1\047\050" +
    "\050\037\051\uffe1\052\uffe1\053\040\054\061\055\uffe1\056" +
    "\uffe1\001\002\000\132\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\035\014\051\015" +
    "\034\016\046\017\041\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\055\025\060\026\047\027\042\030\043\031\054\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\053\042\045\043\052\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\040\054\061\055\ufff8" +
    "\056\ufff8\001\002\000\132\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\035\014\051" +
    "\015\034\016\046\017\041\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\053\042\045\043\052\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\040\054\061\055" +
    "\ufff6\056\ufff6\001\002\000\132\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\035\014" +
    "\051\015\034\016\046\017\041\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\053\042\045\043\052\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\040\054\061" +
    "\055\ufff1\056\ufff1\001\002\000\132\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\052\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\132\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\001\002\000\132\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\034\016\046\017\041\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\053\042\045\043\052\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\040\054\061\055\ufffe\056\ufffe\001\002\000\132\002\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\035\014\051\015\034\016\046\017\041\020\uffe4" +
    "\021\033\022\036\023\056\024\055\025\060\026\047\027" +
    "\042\030\043\031\054\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\053\042\045\043\052\044" +
    "\044\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\040\054\061\055\uffe4\056\uffe4\001\002\000\132\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\035\014\051\015\034\016\046\017\041\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\053\042\045\043\052" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\040\054\061\055\ufff4\056\ufff4\001\002\000\132" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\053\042\045\043" +
    "\052\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\040\054\061\055\ufffc\056\ufffc\001\002\000" +
    "\132\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\052\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002" +
    "\000\132\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\035\014\051\015\034\016\046" +
    "\017\041\020\ufff0\021\033\022\036\023\056\024\055\025" +
    "\060\026\047\027\042\030\043\031\054\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\053\042" +
    "\045\043\052\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\040\054\061\055\ufff0\056\ufff0\001" +
    "\002\000\132\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\035\014\051\015\034\016" +
    "\046\017\041\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\053" +
    "\042\045\043\052\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\040\054\061\055\ufff3\056\ufff3" +
    "\001\002\000\132\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\035\014\051\015\034" +
    "\016\046\017\041\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\053\042\045\043\052\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\040\054\061\055\ufff2\056" +
    "\ufff2\001\002\000\132\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\053\042\045\043\052\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\040\054\061\055\ufffb" +
    "\056\ufffb\001\002\000\132\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\001\002\000\132\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\035\014" +
    "\051\015\034\016\046\017\041\020\uffe3\021\033\022\036" +
    "\023\056\024\055\025\060\026\047\027\042\030\043\031" +
    "\054\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\053\042\045\043\052\044\044\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\040\054\061" +
    "\055\uffe3\056\uffe3\001\002\000\132\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\035" +
    "\014\051\015\034\016\046\017\041\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\055\025\060\026\047\027\042\030\043" +
    "\031\054\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\053\042\045\043\052\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\040\054" +
    "\061\055\ufff9\056\ufff9\001\002\000\132\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\034\016\046\017\041\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\053\042\045\043\052\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\040" +
    "\054\061\055\uffff\056\uffff\001\002\000\132\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\053\042\045\043\052\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\040\054\061\055\ufffd\056\ufffd\001\002\000\132\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\035\014\051\015\034\016\046\017\041\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\055\025\060\026\047\027" +
    "\042\030\043\031\054\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\053\042\045\043\052\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\040\054\061\055\ufffa\056\ufffa\001\002\000\132\002" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\035\014\051\015\034\016\046\017\041\020" +
    "\uffe2\021\033\022\036\023\056\024\055\025\060\026\047" +
    "\027\042\030\043\031\054\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\053\042\045\043\052" +
    "\044\044\045\uffe2\046\uffe2\047\050\050\037\051\uffe2\052" +
    "\uffe2\053\040\054\061\055\uffe2\056\uffe2\001\002\000\126" +
    "\004\024\006\022\007\030\010\011\011\015\012\012\013" +
    "\035\014\051\015\034\016\046\017\041\020\010\021\033" +
    "\022\036\023\056\024\055\025\060\026\047\027\042\030" +
    "\043\031\054\032\007\033\021\034\027\035\025\036\023" +
    "\037\016\040\020\041\053\042\045\043\052\044\044\045" +
    "\005\046\006\047\050\050\037\051\014\052\026\053\040" +
    "\054\061\055\032\056\057\001\002\000\132\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\035\014\051\015\034\016\046\017\041\020\uffe5\021" +
    "\033\022\036\023\056\024\055\025\060\026\047\027\042" +
    "\030\043\031\054\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\053\042\045\043\052\044\044" +
    "\045\uffe5\046\uffe5\047\050\050\037\051\uffe5\052\uffe5\053" +
    "\040\054\061\055\uffe5\056\uffe5\001\002\000\132\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\052\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\064\005" +
    "\116\013\035\014\051\015\034\016\046\017\041\021\033" +
    "\022\036\023\056\024\055\025\060\026\047\027\042\030" +
    "\043\031\054\041\053\042\045\043\052\044\044\047\050" +
    "\050\037\053\040\054\061\055\032\056\057\001\002\000" +
    "\132\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\001\002" +
    "\000\132\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\052\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001" +
    "\002\000\132\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\052\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\001\002\000\132\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\035\014\051\015\034" +
    "\016\046\017\041\020\uffe9\021\033\022\036\023\056\024" +
    "\055\025\060\026\047\027\042\030\043\031\054\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\053\042\045\043\052\044\044\045\uffe9\046\uffe9\047\050" +
    "\050\037\051\uffe9\052\uffe9\053\040\054\061\055\032\056" +
    "\057\001\002\000\132\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\052\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\001\002\000\126\004\024\006\022\007\030\010" +
    "\011\011\015\012\012\013\035\014\051\015\034\016\046" +
    "\017\041\020\010\021\033\022\036\023\056\024\055\025" +
    "\060\026\047\027\042\030\043\031\054\032\007\033\021" +
    "\034\027\035\025\036\023\037\016\040\020\041\053\042" +
    "\045\043\052\044\044\045\005\046\006\047\050\050\037" +
    "\051\014\052\026\053\040\054\061\055\032\056\057\001" +
    "\002\000\132\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\035\014\051\015\034\016" +
    "\046\017\041\020\uffe6\021\033\022\036\023\056\024\055" +
    "\025\060\026\047\027\042\030\043\031\054\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\053" +
    "\042\045\043\052\044\044\045\uffe6\046\uffe6\047\050\050" +
    "\037\051\uffe6\052\uffe6\053\040\054\061\055\uffe6\056\uffe6" +
    "\001\002\000\004\002\001\001\002\000\132\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\035\014\051\015\034\016\046\017\041\020\ufff7\021" +
    "\033\022\036\023\056\024\055\025\060\026\047\027\042" +
    "\030\043\031\054\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\053\042\045\043\052\044\044" +
    "\045\ufff7\046\ufff7\047\050\050\037\051\ufff7\052\ufff7\053" +
    "\040\054\061\055\ufff7\056\ufff7\001\002\000\132\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\052\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\001\002\000\132\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002\000\132" +
    "\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\010\002\012\003\003\004\016\001\001\000" +
    "\002\001\001\000\006\003\130\004\016\001\001\000\006" +
    "\003\127\004\016\001\001\000\006\003\126\004\016\001" +
    "\001\000\006\003\125\004\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\122\004" +
    "\016\001\001\000\002\001\001\000\006\003\121\004\016" +
    "\001\001\000\002\001\001\000\006\003\120\004\016\001" +
    "\001\000\006\003\117\004\016\001\001\000\002\001\001" +
    "\000\006\003\116\004\016\001\001\000\006\003\114\004" +
    "\016\001\001\000\006\003\113\004\016\001\001\000\006" +
    "\003\111\004\016\001\001\000\006\003\030\004\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\110" +
    "\004\016\001\001\000\006\003\107\004\016\001\001\000" +
    "\006\003\106\004\016\001\001\000\006\003\105\004\016" +
    "\001\001\000\006\003\104\004\016\001\001\000\006\003" +
    "\103\004\016\001\001\000\002\001\001\000\006\003\101" +
    "\004\016\001\001\000\006\003\100\004\016\001\001\000" +
    "\006\003\077\004\016\001\001\000\006\003\076\004\016" +
    "\001\001\000\006\003\075\004\016\001\001\000\006\003" +
    "\074\004\016\001\001\000\006\003\073\004\016\001\001" +
    "\000\006\003\072\004\016\001\001\000\006\003\071\004" +
    "\016\001\001\000\006\003\070\004\016\001\001\000\006" +
    "\003\067\004\016\001\001\000\006\003\066\004\016\001" +
    "\001\000\006\003\065\004\016\001\001\000\006\003\064" +
    "\004\016\001\001\000\006\003\063\004\016\001\001\000" +
    "\006\003\062\004\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\112\004\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\123\004\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JpsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JpsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JpsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }

 
	public Lexer lexer;
	private String expr;
	public AbstractExpression RESULT;
	
	public JpsParser(String expr) {
		this.symbolFactory = new DefaultSymbolFactory();   
		this.expr = expr;
	}
	
	void setResult(AbstractExpression exp) {
		this.RESULT = exp;
	}  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JpsParser$actions {
  private final JpsParser parser;

  /** Constructor */
  CUP$JpsParser$actions(JpsParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JpsParser$do_action(
    int                        CUP$JpsParser$act_num,
    java_cup.runtime.lr_parser CUP$JpsParser$parser,
    java.util.Stack            CUP$JpsParser$stack,
    int                        CUP$JpsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JpsParser$result;

      /* select the action based on the action number */
      switch (CUP$JpsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identifier_literal ::= IDENTIFIER 
            {
              NameTerminal RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new NameTerminal((String)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("identifier_literal",2, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= BAG expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new BagExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		 RESULT = e1; 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= BOOLEAN_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new BooleanTerminal((Boolean)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= DOUBLE_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Double o = (Double)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new DoubleTerminal((Double)o);   
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= STRING_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new StringTerminal((String)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= INTEGER_LITERAL 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new IntegerTerminal((Integer)o); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= identifier_literal 
            {
              AbstractExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		NameTerminal l = (NameTerminal)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = l; 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr GROUP_AS IDENTIFIER 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new GroupAsExpression(i1, e1); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr AS IDENTIFIER 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new AsExpression(i1, e1); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= STRUCT expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new StructExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr DOT expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new DotExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr JOIN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new JoinExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr WHERE expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new WhereExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr IN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new InExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr UNION expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new UnionExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= FOR_ANY expr expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new ForAnyExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= FOR_ALL expr expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new ForAllExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr INTERSECT expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new IntersectExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr MINUS_SET expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MinusSetExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= EXISTS expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new ExistsExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= UNIQUE expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new UniqueExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= MAX expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MaxExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MIN expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MinExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= AVG expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new AvgExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= COUNT expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new CountExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= SUM expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new SumExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr COMMA expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new CommaExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MORE_EQ_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MoreOrEqualThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr LESS_EQ_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new LessOrEqualThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MORE_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MoreThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LESS_THAN expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new LessThanExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr NOT_EQ expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr EQ expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= NOT expr 
            {
              AbstractExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new NotExpression(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr XOR expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new XORExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr OR expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new OrExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr AND expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new AndExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new ModuloExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new DivideExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MultiplyExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new MinusExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = new PlusExpression(e1, e2); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-2)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              AbstractExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          return CUP$JpsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).right;
		AbstractExpression start_val = (AbstractExpression)((java_cup.runtime.Symbol) CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)).value;
		RESULT = start_val;
              CUP$JpsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JpsParser$stack.elementAt(CUP$JpsParser$top-1)), ((java_cup.runtime.Symbol)CUP$JpsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JpsParser$parser.done_parsing();
          return CUP$JpsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

